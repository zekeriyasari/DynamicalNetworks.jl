var documenterSearchIndex = {"docs":
[{"location":"#DynamicalNetworks.jl-1","page":"Home","title":"DynamicalNetworks.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Modules = [DynamicalNetworks]","category":"page"},{"location":"#DynamicalNetworks.Lorenz","page":"Home","title":"DynamicalNetworks.Lorenz","text":"struct Lorenz{T1, T2, T3, T4} <: NodeDynamics\n\nLorenz dynamics that evolves by \n\ndotx_1 = sigma (x_2 - x_1) \ndotx_2 = x_1 (rho - x_3) - x_2 \ndotx_3 = x_1 x_2 - beta x_3\n\nwhere sigma beta rho are system parameters.\n\nFields\n\nσ::Any\nβ::Any\nρ::Any\nx::Any\n\n\n\n\n\n","category":"type"},{"location":"#DynamicalNetworks.Network","page":"Home","title":"DynamicalNetworks.Network","text":"struct Network{T1, T2, T3}\n\nA network consisting of dynamical systems. The dynamics of the network evolves by, \n\n    dotx_i = f_i(x_i) + sum_j = 1^n epsilon_ij P x_j quad i = 1 ldots n\n\nwhere x_i is the state vector of node i,  f_i is the individual node dynamics\\epsilon{ỉj} \\geq 0is the coupling strength between the nodesiandjP = diag(p1, \\ldots, p_d)`` determines the state variables by which the nodes are coupled. \n\nFields\n\nnodes::Any\nE::Any\nP::Any\n\n\n\n\n\n","category":"type"},{"location":"#DynamicalNetworks.Simulation","page":"Home","title":"DynamicalNetworks.Simulation","text":"struct Simulation\n\nA simlation object that containining simulation info such as the path of the simulation data file and simulation status.\n\nFields\n\nfilepath::String\nretcode::Symbol\n\n\n\n\n\n","category":"type"},{"location":"#DynamicalNetworks.readsim-Tuple{Simulation}","page":"Home","title":"DynamicalNetworks.readsim","text":"readsim(sim)\n\n\nReads the simulation data and returns a tuple of simulation time and simulation data.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicalNetworks.signalflow-Tuple{Network}","page":"Home","title":"DynamicalNetworks.signalflow","text":"signalflow(net)\n\n\nPlots signal flow graph. \n\n\n\n\n\n","category":"method"},{"location":"#DynamicalNetworks.simulate","page":"Home","title":"DynamicalNetworks.simulate","text":"simulate(net)\nsimulate(net, ti)\nsimulate(net, ti, dt)\nsimulate(net, ti, dt, tf)\nsimulate(net, ti, dt, tf, solargs; solkwargs, path, filename)\n\n\nSimulates net from ti to tf with a step size ofdt`.\n\n\n\n\n\n","category":"function"},{"location":"#DynamicalNetworks.getprob-Tuple{Network,Tuple}","page":"Home","title":"DynamicalNetworks.getprob","text":"getprob(net, tspan)\n\n\nReturns an ODE problem for a time span of tspan. \n\n\n\n\n\n","category":"method"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"}]
}
